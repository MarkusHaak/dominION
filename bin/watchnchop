#!/usr/bin/perl

# Copyright 2018 Christian Rueckert (cruecker@cebitec.uni-bielefeld.de)
# https://github.com/MarkusHaak/dominION
# 
# This file is part of dominION. dominION is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version. dominION is distributed in
# the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public License along with dominION. If
# not, see <http://www.gnu.org/licenses/>.

use strict;

use IO::Compress::Gzip qw(gzip $GzipError) ;

use Getopt::Std;

use POSIX 'strftime';

use File::Path qw(make_path remove_tree);

use sigtrap qw/handler signal_handler TERM/;
my $term_ref;; 
$$term_ref = 0;

our($opt_a, $opt_b, $opt_f, $opt_p, $opt_l, $opt_q, $opt_o, $opt_n, $opt_t, $opt_d, $opt_i, $opt_v);

getopts('abf:pl:q:o:t:d:i:nv');

# -a(all fast5):     also put fast5 files of reads removed by length and quality filtering into barcode bins 
# -b(arcoding):      use porechop to demultiplex the fastq data 
# -f(astq reads):    the number of fastq reads in an input file (default: use time since write (error-prone for low yield runs!))
# -p(ass only):      use data from fastq_pass only
# -l(ength):         minimal length to pass filter (default: 1000)
# -q(uality):        minimal quality to pass filter (default: 5)
# -o(utput stats):   path to store the stats file
# -t(ime since mod): time interval (sec)  for a fastq file to be processed, if no number of input reads is given (default: 3600)
# -d(estination):    destination for rsync data transfer (format USER@HOST[:DEST])
# -i(dentity file):  file from which the identity (private key) for public key authentication is read
# -n(o transfer):    no data transfer to remote host
# -v(erbose):        print some info to STDERR

die "Please select either option -n or both options -d and -i\n" unless ($opt_n || ($opt_d && $opt_i));

unless ($opt_n) {
    system("touch /tmp/.dummy");
    my $exit_state = system("rsync -Rruve 'ssh -o \"NumberOfPasswordPrompts 0\" -i $opt_i' /tmp/./.dummy $opt_d");
    die "Something went wrong during the file transfer test. Please check that key authentication is set up correctly for the user and host in defaults.ini\n" if ($exit_state);
}


$opt_l = 1000 unless ($opt_l);
$opt_q = 5 unless ($opt_q);
$opt_t = 3600 unless ($opt_t);

my $starttime = time;

my $entry_dir = $ARGV[0];

my %seen;
my %processed;

mkdir "/data/ARCHIVE/" unless (-e "/data/ARCHIVE/");
mkdir "/data/outgoing/" unless (-e "/data/outgoing/");

my ($basedir) = ($entry_dir =~ m#/data/(.+?)/#);
my $outdir = $entry_dir;
$outdir =~ s#/data/#/data/./outgoing/#;
remove_tree "$outdir" if (-e "$outdir");
make_path "$outdir/";

system("ln -s /data/$basedir /data/ARCHIVE/") unless (-e "/data/ARCHIVE/$basedir");

my $statsfile = "$outdir/stats.csv";
my $fast5splitfile = "$outdir/fast5split.csv";

my $nfqr = 4000;
$nfqr = 4 * $opt_f if ($opt_f =~ m/^\d+$/);

print "Writing stats to $opt_o\n" if ($opt_v);
$statsfile = $opt_o if ($opt_o);

open STATS, ">$statsfile"
    || die "Cannot open stat file $statsfile for writing: $!";

my $systime = systime();
print STDOUT "Starting watchnchop for $entry_dir on $systime\n" if ($opt_v);

my %indices;

while (1) {
    my $time = time;

    opendir(DIR, "$entry_dir/fastq_pass");
    my @fastqs = map { "pass/" . $_ } grep(/.+_.+_(\d+).fastq$/,readdir(DIR));
    unless ($opt_p) {    
        opendir(DIR, "$entry_dir/fastq_fail");
        push(@fastqs, map { "fail/" . $_ } grep(/.+_.+_(\d+).fastq$/,readdir(DIR)));
    }
    closedir(DIR);

    foreach my $file (keys(%seen)) {
        
        my $mtime = (stat("$entry_dir/fastq_$file"))[9];

        if (($opt_f && ($nfqr == `wc -l $entry_dir/fastq_$file`)) || (!$opt_f && ($time > ($mtime + $opt_t))) || $$term_ref) {
            open FAST5SPLIT, ">$fast5splitfile"
                || die "Cannot open temp stat file $fast5splitfile for writing: $!";

            make_path "$outdir/porechop/$file" unless (-e "$outdir/porechop/$file");        

            my $pcout = "-o $outdir/porechop/$file/1D.fastq";
            $pcout = "-b $outdir/porechop/$file" if ($opt_b);
            $pcout .= "  1> /dev/null 2> /dev/null" unless ($opt_v);
            my $systime = systime();
            print STDOUT "Watchnchop runs porechop and filtering on $systime\n" if ($opt_v);
            system("porechop -i $entry_dir/fastq_$file $pcout");

            opendir(DIR, "$outdir/porechop/$file");
            my @choppedfastqs = grep(/(.+)\.fastq$/,readdir(DIR));
            closedir(DIR);

            foreach my $chopfile (@choppedfastqs) {

                open DATA, "$outdir/porechop/$file/$chopfile";
                    
                my ($barc) = ($chopfile =~ m#(.+)\.fastq#);
                my $outfile = "$outdir/$barc.fastq.gz";

                my $outfh = new IO::Compress::Gzip $outfile, Append => 1;  

                while (<DATA>) {

                    s/\r*\n*$//;
            
                    my ($header) = (m/@(.+)/);

                    my $seq = (<DATA>);
                    $seq =~ s/\r*\n*$//;
                    my $gc = &calc_gc($seq);

                    my $void = (<DATA>);
                    my $qual = (<DATA>);
                    $qual =~ s/\r*\n*$//;
                    
                    my $length = length($seq);
                    my $aq = &calc_qual($qual);
                    
                    my ($id, $read, $pore, $time) = ($header =~ m/(.+) runid=.+ read=(\d+) ch=(\d+) start_time=(\S+)/);

                    print STATS "$id\t$length\t$aq\t$gc";
                    
                    if ($aq >= $opt_q) {
                        if ($length >= $opt_l) {
                            print STATS "\tPassed";
                            print FAST5SPLIT "$id\t$barc\n";
                            $outfh->print('@', "$header\n$seq\n+\n$qual\n");
                        } else {
                            print FAST5SPLIT "$id\t$barc\n" if ($opt_a);
                            print STATS "\tlength<$opt_l";
                        }
                    } else {
                        print STATS "\tqual<$opt_q" ;
                        print FAST5SPLIT "$id\t$barc\n" if ($opt_a);
                    }
                    print STATS "\t$read\t$pore\t$time\t$barc\n";
                }
                close DATA;
                unlink "$outdir/porechop/$file/$chopfile";
                $outfh->close();
            }
            rmdir "$outdir/porechop/$file";

            my $f5f = $file;
            $f5f =~ s/.fastq/.fast5/;
            system("multi_to_multi_fast5 -i $entry_dir/fast5_$f5f -s $outdir -b $fast5splitfile");
            unlink $fast5splitfile;
            $processed{$file} = $mtime;
            delete $seen{$file};
        }
    }
    # delay looking for files until the first run-through to avoid "empty" lists
    foreach my $file (@fastqs) {
        next if ($processed{$file});
        $seen{$file} = 1;
    }
    remove_tree("$outdir/porechop/");
    print STDOUT "Watchnchop transfers processed data to remote client\n" if ($opt_v);
    system("rsync --exclude '*.fast5' -Rruve 'ssh -o \"NumberOfPasswordPrompts 0\" -i $opt_i' $outdir $opt_d") unless ($opt_n);

    # terminate if all data has been processed and the process has received a TERM signal
    last if (!(keys %seen) && $$term_ref);
    sleep 60;
}



print STDOUT "Watchnchop transfers raw data to remote client\n" if ($opt_v);
# transfer the raw data to the remote client
#remove_tree("$outdir/porechop/");
system("rsync -Rruve 'ssh -o \"NumberOfPasswordPrompts 0\" -i $opt_i' $outdir $opt_d") unless ($opt_n);
remove_tree("$outdir");
system("rsync -Rkruve 'ssh -o \"NumberOfPasswordPrompts 0\" -i $opt_i' /data/./ARCHIVE/$basedir $opt_d") unless ($opt_n);

my $systime = systime();
print STDOUT "Watchnchop died peacefully on $systime\n" if ($opt_v);


exit;

sub by_number {
    $a <=> $b;
}

sub systime {
    my $systime = strftime "%d-%m-%Y %H:%M:%S", localtime;
    return($systime);
}

sub signal_handler {
    $$term_ref = 1;
}

sub calc_gc {
    my ($seq) = @_;
    my $total = length $seq;
   
    my ($value) = ($seq =~ tr/cCgG//);
    
    my $average = sprintf('%2.2f', eval{$value/$total * 100});
    
    return ($average);
}

sub calc_qual {
    my ($qual) = @_;
    my $total = length $qual;
    my $value;
    
    foreach (split(//, $qual)) {
        $value += ((unpack 'c', ($_)) - 33);
    }
    
    my $average = sprintf('%2.2f', eval{$value/$total});
    
    return ($average);
}
